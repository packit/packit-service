"""Move commit_sha to project_events

Revision ID: af00a7f19025
Revises: 4033221ea50c
Create Date: 2023-05-26 11:38:41.607843

"""

import enum
from typing import TYPE_CHECKING

import sqlalchemy as sa
from sqlalchemy import (
    Column,
    ForeignKey,
    Integer,
    String,
    orm,
    update,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

from alembic import op

if TYPE_CHECKING:  # noqa: SIM108
    Base = object
else:
    Base = declarative_base()

# revision identifiers, used by Alembic.
revision = "af00a7f19025"
down_revision = "4033221ea50c"
branch_labels = None
depends_on = None


class ProjectEventModelType(str, enum.Enum):
    pull_request = "pull_request"
    branch_push = "branch_push"
    release = "release"
    issue = "issue"


class ProjectEventModel(Base):
    __tablename__ = "project_events"
    id = Column(Integer, primary_key=True)
    event_id = Column(Integer, index=True)
    commit_sha = Column(String, index=True)
    runs = relationship("PipelineModel", back_populates="project_event")


class PipelineModel(Base):
    __tablename__ = "pipelines"
    id = Column(Integer, primary_key=True)
    project_event_id = Column(Integer, ForeignKey("project_events.id"), index=True)
    project_event = relationship("ProjectEventModel", back_populates="runs")

    srpm_build_id = Column(Integer, ForeignKey("srpm_builds.id"), index=True)
    srpm_build = relationship("SRPMBuildModel", back_populates="runs")
    copr_build_group_id = Column(
        Integer,
        ForeignKey("copr_build_groups.id"),
        index=True,
    )
    copr_build_group = relationship("CoprBuildGroupModel", back_populates="runs")
    koji_build_group_id = Column(
        Integer,
        ForeignKey("koji_build_groups.id"),
        index=True,
    )
    koji_build_group = relationship("KojiBuildGroupModel", back_populates="runs")
    vm_image_build_id = Column(
        Integer,
        ForeignKey("vm_image_build_targets.id"),
        index=True,
    )
    vm_image_build = relationship("VMImageBuildTargetModel", back_populates="runs")
    test_run_group_id = Column(
        Integer,
        ForeignKey("tft_test_run_groups.id"),
        index=True,
    )
    test_run_group = relationship("TFTTestRunGroupModel", back_populates="runs")


class SRPMBuildModel(Base):
    __tablename__ = "srpm_builds"
    id = Column(Integer, primary_key=True)
    commit_sha = Column(String)
    runs = relationship("PipelineModel", back_populates="srpm_build")


class KojiBuildGroupModel(Base):
    __tablename__ = "koji_build_groups"
    id = Column(Integer, primary_key=True)
    runs = relationship("PipelineModel", back_populates="koji_build_group")
    koji_build_targets = relationship(
        "KojiBuildTargetModel",
        back_populates="group_of_targets",
    )


class KojiBuildTargetModel(Base):
    __tablename__ = "koji_build_targets"
    id = Column(Integer, primary_key=True)
    commit_sha = Column(String)
    koji_build_group_id = Column(Integer, ForeignKey("koji_build_groups.id"))
    group_of_targets = relationship(
        "KojiBuildGroupModel",
        back_populates="koji_build_targets",
    )


class CoprBuildGroupModel(Base):
    __tablename__ = "copr_build_groups"
    id = Column(Integer, primary_key=True)
    runs = relationship("PipelineModel", back_populates="copr_build_group")
    copr_build_targets = relationship(
        "CoprBuildTargetModel",
        back_populates="group_of_targets",
    )


class CoprBuildTargetModel(Base):
    __tablename__ = "copr_build_targets"
    id = Column(Integer, primary_key=True)
    commit_sha = Column(String)
    copr_build_group_id = Column(
        Integer,
        ForeignKey("copr_build_groups.id"),
        index=True,
    )
    group_of_targets = relationship(
        "CoprBuildGroupModel",
        back_populates="copr_build_targets",
    )


class TFTTestRunGroupModel(Base):
    __tablename__ = "tft_test_run_groups"
    id = Column(Integer, primary_key=True)
    runs = relationship("PipelineModel", back_populates="test_run_group")
    tft_test_run_targets = relationship(
        "TFTTestRunTargetModel",
        back_populates="group_of_targets",
    )


class TFTTestRunTargetModel(Base):
    __tablename__ = "tft_test_run_targets"
    id = Column(Integer, primary_key=True)
    commit_sha = Column(String)
    tft_test_run_group_id = Column(Integer, ForeignKey("tft_test_run_groups.id"))
    group_of_targets = relationship(
        "TFTTestRunGroupModel",
        back_populates="tft_test_run_targets",
    )


class VMImageBuildTargetModel(Base):
    __tablename__ = "vm_image_build_targets"
    id = Column(Integer, primary_key=True)
    commit_sha = Column(String)
    runs = relationship("PipelineModel", back_populates="vm_image_build")


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("project_events", sa.Column("commit_sha", sa.String(), nullable=True))
    op.create_index(
        op.f("ix_project_events_commit_sha"),
        "project_events",
        ["commit_sha"],
        unique=False,
    )
    op.create_index(
        op.f("ix_pipelines_project_event_id"),
        "pipelines",
        ["project_event_id"],
        unique=False,
    )

    # start data migration
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    rows = (
        session.query(PipelineModel.project_event_id, KojiBuildTargetModel.commit_sha)
        .join(
            KojiBuildGroupModel,
            KojiBuildTargetModel.koji_build_group_id == KojiBuildGroupModel.id,
        )
        .join(
            PipelineModel,
            PipelineModel.koji_build_group_id == KojiBuildGroupModel.id,
        )
        .all()
    )
    rows.extend(
        session.query(PipelineModel.project_event_id, SRPMBuildModel.commit_sha)
        .join(SRPMBuildModel, SRPMBuildModel.id == PipelineModel.srpm_build_id)
        .all(),
    )
    rows.extend(
        session.query(PipelineModel.project_event_id, CoprBuildTargetModel.commit_sha)
        .join(
            CoprBuildGroupModel,
            CoprBuildTargetModel.copr_build_group_id == CoprBuildGroupModel.id,
        )
        .join(
            PipelineModel,
            PipelineModel.copr_build_group_id == CoprBuildGroupModel.id,
        )
        .all(),
    )
    rows.extend(
        session.query(PipelineModel.project_event_id, TFTTestRunTargetModel.commit_sha)
        .join(
            TFTTestRunGroupModel,
            TFTTestRunTargetModel.tft_test_run_group_id == TFTTestRunGroupModel.id,
        )
        .join(PipelineModel, PipelineModel.test_run_group_id == TFTTestRunGroupModel.id)
        .all(),
    )
    rows.extend(
        session.query(
            PipelineModel.project_event_id,
            VMImageBuildTargetModel.commit_sha,
        )
        .join(
            VMImageBuildTargetModel,
            VMImageBuildTargetModel.id == PipelineModel.vm_image_build_id,
        )
        .all(),
    )
    for row in rows:
        bind.execute(
            update(ProjectEventModel)
            .where(ProjectEventModel.id == row[0])
            .values(commit_sha=row[1]),
        )

    op.drop_index("ix_copr_build_targets_commit_sha", table_name="copr_build_targets")
    op.drop_column("copr_build_targets", "commit_sha")
    op.drop_column("koji_build_targets", "commit_sha")
    op.drop_column("srpm_builds", "commit_sha")
    op.drop_column("tft_test_run_targets", "commit_sha")
    op.drop_index(
        "ix_vm_image_build_targets_commit_sha",
        table_name="vm_image_build_targets",
    )
    op.drop_column("vm_image_build_targets", "commit_sha")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "vm_image_build_targets",
        sa.Column("commit_sha", sa.String(), autoincrement=False, nullable=True),
    )
    op.create_index(
        "ix_vm_image_build_targets_commit_sha",
        "vm_image_build_targets",
        ["commit_sha"],
        unique=False,
    )
    op.add_column(
        "tft_test_run_targets",
        sa.Column("commit_sha", sa.String(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "srpm_builds",
        sa.Column("commit_sha", sa.String(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "koji_build_targets",
        sa.Column("commit_sha", sa.String(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "copr_build_targets",
        sa.Column("commit_sha", sa.String(), autoincrement=False, nullable=True),
    )
    op.create_index(
        "ix_copr_build_targets_commit_sha",
        "copr_build_targets",
        ["commit_sha"],
        unique=False,
    )

    # start data migration
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    rows = (
        session.query(KojiBuildTargetModel.id, ProjectEventModel.commit_sha)
        .join(
            KojiBuildGroupModel,
            KojiBuildTargetModel.koji_build_group_id == KojiBuildGroupModel.id,
        )
        .join(
            PipelineModel,
            PipelineModel.koji_build_group_id == KojiBuildGroupModel.id,
        )
        .join(ProjectEventModel, ProjectEventModel.id == PipelineModel.project_event_id)
        .all()
    )
    for row in rows:
        bind.execute(
            update(KojiBuildTargetModel)
            .where(KojiBuildTargetModel.id == row[0])
            .values(commit_sha=row[1]),
        )
    rows = (
        session.query(SRPMBuildModel.id, ProjectEventModel.commit_sha)
        .join(PipelineModel, PipelineModel.srpm_build_id == SRPMBuildModel.id)
        .join(ProjectEventModel, ProjectEventModel.id == PipelineModel.project_event_id)
        .all()
    )
    for row in rows:
        bind.execute(
            update(SRPMBuildModel).where(SRPMBuildModel.id == row[0]).values(commit_sha=row[1]),
        )
    rows = (
        session.query(CoprBuildTargetModel.id, ProjectEventModel.commit_sha)
        .join(
            CoprBuildGroupModel,
            CoprBuildTargetModel.copr_build_group_id == CoprBuildGroupModel.id,
        )
        .join(
            PipelineModel,
            PipelineModel.copr_build_group_id == CoprBuildGroupModel.id,
        )
        .join(ProjectEventModel, ProjectEventModel.id == PipelineModel.project_event_id)
        .all()
    )
    for row in rows:
        bind.execute(
            update(CoprBuildTargetModel)
            .where(CoprBuildTargetModel.id == row[0])
            .values(commit_sha=row[1]),
        )
    rows = (
        session.query(TFTTestRunTargetModel.id, ProjectEventModel.commit_sha)
        .join(
            TFTTestRunGroupModel,
            TFTTestRunTargetModel.tft_test_run_group_id == TFTTestRunGroupModel.id,
        )
        .join(PipelineModel, PipelineModel.test_run_group_id == TFTTestRunGroupModel.id)
        .join(ProjectEventModel, ProjectEventModel.id == PipelineModel.project_event_id)
        .all()
    )
    for row in rows:
        bind.execute(
            update(TFTTestRunTargetModel)
            .where(TFTTestRunTargetModel.id == row[0])
            .values(commit_sha=row[1]),
        )
    rows = (
        session.query(VMImageBuildTargetModel.id, ProjectEventModel.commit_sha)
        .join(
            PipelineModel,
            PipelineModel.vm_image_build_id == VMImageBuildTargetModel.id,
        )
        .join(ProjectEventModel, ProjectEventModel.id == PipelineModel.project_event_id)
        .all()
    )
    for row in rows:
        bind.execute(
            update(VMImageBuildTargetModel)
            .where(VMImageBuildTargetModel.id == row[0])
            .values(commit_sha=row[1]),
        )

    op.drop_index(op.f("ix_project_events_commit_sha"), table_name="project_events")
    op.drop_column("project_events", "commit_sha")
    op.drop_index(op.f("ix_pipelines_project_event_id"), table_name="pipelines")
    # ### end Alembic commands ###
